name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          VERSION=${GITHUB_REF_NAME}
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -o dist/crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }} .

      - name: Package
        shell: bash
        run: |
          cd dist
          VERSION=${{ github.ref_name }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            mv crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }} crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}.exe
            powershell Compress-Archive -Path crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}.exe -DestinationPath crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
            rm crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          else
            tar czf crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}
            rm crush-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    name: Create GitHub Release with Changelog
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: dist
          merge-multiple: true

      - name: Generate changelog
        shell: bash
        id: changelog
        run: |
          TAG=${GITHUB_REF_NAME}
          PREV_TAG=$(git tag --sort=-creatordate | grep -B1 "$TAG" | head -n1)
          if [ -z "$PREV_TAG" ]; then
            git log --oneline > changelog.txt
          else
            git log $PREV_TAG..$TAG --oneline > changelog.txt
          fi
          cat changelog.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body_path: changelog.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
